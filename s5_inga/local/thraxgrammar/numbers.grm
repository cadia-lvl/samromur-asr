# Expand numbers to numbernames
#
# Copyright 2017  Reykjavik University (Author: Inga Rún Helgadóttir)
# Apache 2.0

import 'local/thraxgrammar/common.grm' as c;

insspace = "".utf8 : " ".utf8;

zero  = "0".utf8 : "núll".utf8;

delzero = "0".utf8 : "".utf8;
delone = "1".utf8 : "".utf8;
insand = "".utf8 : " og ".utf8;

units_notNeutral = Optimize[StringFile['local/thraxgrammar/lex/units_notNeutral.txt', 'utf8', 'utf8']];
one = "1".utf8 : "eitt".utf8;
export neutral_units2to9 = Optimize[StringFile['local/thraxgrammar/lex/neutral_units2to9.txt', 'utf8', 'utf8']];
export neutral_units = one | neutral_units2to9;
export units = units_notNeutral | neutral_units;

ten = "10".utf8 : "tíu".utf8;
teens =   ("11".utf8 : "ellefu".utf8)
        | ("12".utf8 : "tólf".utf8)
        | ("13".utf8 : "þrettán".utf8)
        | ("14".utf8 : "fjórtán".utf8)
        | ("15".utf8 : "fimmtán".utf8)
        | ("16".utf8 : "sextán".utf8)
        | ("17".utf8 : "sautján".utf8)
        | ("18".utf8 : "átján".utf8)
        | ("19".utf8 : "nítján".utf8);
teensplus = ten | teens;

decades =   ("2".utf8 : "tuttugu".utf8)
          | ("3".utf8 : "þrjátíu".utf8)
          | ("4".utf8 : "fjörutíu".utf8)
          | ("5".utf8 : "fimmtíu".utf8)
          | ("6".utf8 : "sextíu".utf8)
          | ("7".utf8 : "sjötíu".utf8)
          | ("8".utf8 : "áttatíu".utf8)
          | ("9".utf8 : "níutíu".utf8);

export numbers_20_to_99 = (decades delzero) |
  decades insand ((units_notNeutral <-3>) | (neutral_units <-4.0>));

export teensplus_and_round_numbers_20_to_90 = teensplus | (decades delzero);

export non_round_numbers_21_to_99 = decades insand ((units_notNeutral <-3>) | (neutral_units <-4.0>));

numbers_to_99 = Optimize[ zero | (units <-0.5>) | (teensplus <-1>) | (numbers_20_to_99  <-2>)];

hundreds = (((one insspace | (delone <-3.0>))
  ("".utf8 : "hundrað".utf8)) | (neutral_units2to9 insspace ("".utf8 : "hundruð".utf8)));

numbers_100_to_999 = Optimize[
  hundreds delzero delzero |
  (hundreds delzero insand units <-1>) |
  (hundreds insand teensplus_and_round_numbers_20_to_90 <-2>) |
  (hundreds insspace non_round_numbers_21_to_99 <-10>)]
;

year = Optimize[
  ((teens insspace ("".utf8 : "hundruð".utf8)
  (delzero delzero |
  (delzero insand neutral_units <-1>) |
  (insand teensplus_and_round_numbers_20_to_90 <-2>) |
  (insspace non_round_numbers_21_to_99 <-10>)))
  | (neutral_units2to9 insspace ("".utf8 : "þúsund".utf8)
  delzero delzero insand neutral_units))]
;

# I add "og" here since learning that rule didn't
# happen from Leipzig
tail_1000_to_9999 = Optimize[
  ("".utf8 : "þúsund".utf8)
  (delzero delzero delzero |
  (delzero delzero insand units <-4>) |
  (delzero insand teensplus_and_round_numbers_20_to_90 <-6>) |
  (delzero insspace non_round_numbers_21_to_99 <-6>) |
  ((insspace | insand) numbers_100_to_999 <-8>))]
;

numbers_1000_to_9999 = Optimize[
  ((neutral_units2to9 insspace <-10>) | one | delone)
  tail_1000_to_9999]
;

numbers_10000_to_99999 = Optimize[
  (teensplus | numbers_20_to_99)
  insspace
  tail_1000_to_9999]
;

numbers_100000_to_999999 = Optimize[
  numbers_100_to_999
  insspace
  tail_1000_to_9999]
;

#ein milljón og eitt þúsund
tail_1M_to_9M = Optimize[
  ("".utf8 : ("milljón".utf8 | "milljónar".utf8 |
  "milljónir".utf8 | "milljónum".utf8 | "milljóna".utf8 ))
  (delzero delzero delzero delzero delzero delzero |
  (delzero delzero delzero delzero delzero insand units <-4>) |
  (delzero delzero delzero delzero insand teensplus_and_round_numbers_20_to_90 <-6>) |
  (delzero delzero delzero delzero insspace non_round_numbers_21_to_99 <-6>) |
  (delzero delzero delzero (insspace | insand) numbers_100_to_999 <-8>) |
  (delzero delzero (insspace | insand) numbers_1000_to_9999 <-50>) |
  (delzero (insspace | insand) numbers_10000_to_99999 <-60>) |
  ((insspace | insand) numbers_100000_to_999999 <-150>))]
;

numbers_1M_to_9M = Optimize[
  ((units_notNeutral <-1>) | delone)
  insspace
  tail_1M_to_9M]
;

numbers_10M_to_99M = Optimize[
  (teensplus | numbers_20_to_99)
  insspace
  tail_1M_to_9M]
;

numbers_100M_to_999M = Optimize[
  numbers_100_to_999
  insspace
  tail_1M_to_9M]
;

export NUMBERNAMES = Optimize[
  numbers_to_99 |
  (numbers_100_to_999 <-3>) |
  (numbers_1000_to_9999 <-16>) |
  (numbers_10000_to_99999 <-32>) |
  (numbers_100000_to_999999 <-64>) |
  (numbers_1M_to_9M  <-150>) |
  (numbers_10M_to_99M <-300>) |
  (numbers_100M_to_999M <-600>) |
  (year <-30.0>) ]
;

# export NUMBERNAMES_10plus_and_0 = Optimize[
#   numbers_10_to_99 |
#   (numbers_100_to_999 <-3>) |
#   (numbers_1000_to_9999 <-16>) |
#   (numbers_10000_to_99999 <-32>) |
#   (numbers_100000_to_999999 <-64>) |
#   (numbers_1M_to_9M  <-150>) |
#   (year <-30.0>) ]
# ;

numbers_10_to_99 = Optimize[ zero | (teensplus <-1>) | (numbers_20_to_99  <-2>)];
export NUMBERNAMES_10_to_999999_and_0 = Optimize[
  numbers_10_to_99 |
  (numbers_100_to_999 <-3>) |
  (numbers_1000_to_9999 <-16>) |
  (numbers_10000_to_99999 <-32>) |
  (numbers_100000_to_999999 <-128>) |
  (year <-30.0>) ]
;

numbers_11_to_99 = Optimize[ zero | (teens <-1>) | (numbers_20_to_99  <-2>)];
export NUMBERNAMES_11_to_999999_and_0 = Optimize[
  numbers_11_to_99 |
  (numbers_100_to_999 <-3>) |
  (numbers_1000_to_9999 <-16>) |
  (numbers_10000_to_99999 <-32>) |
  (numbers_100000_to_999999 <-128>) |
  (year <-30.0>) ]
;

# export add_and = CDRewrite[
#   " ".utf8 : " og ".utf8,
#   c.alphabet+,
#   c.alphabet+,
#   c.whole_alphabet*,
#   'rtl',
#   'opt']
# ;

#export NUMBERNAMES = Optimize[numbers @ add_and];

# Obligatory CDrewrites, no path has non-expanded numbers (this FST
# accepts all strings)
#delspace = (" ".utf8 : "".utf8);
# export EXPANDNUMS = ArcSort[Optimize[
#                           CDRewrite[NUMBERNAMES,
#                                     ("[BOS]".utf8 | " ".utf8),
#                                     ("[EOS]".utf8 | " ".utf8 | c.u8_punct),
#                                     c.whole_alphabet*,
#                                     'ltr',
#                                     'obl']], 'input'];
